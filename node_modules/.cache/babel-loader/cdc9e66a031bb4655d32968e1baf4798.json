{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredText, setEnteredText] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const enteredIsValid = validateValue(enteredText);\n  const hasError = !enteredIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredText(event.target.value);\n  };\n\n  const inputBlurHandler = () => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredText('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredText,\n    isValid: enteredIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"Y3wjbQtCBpOFJZDxROH3O2uHI9w=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/hook/use-input.js"],"names":["useState","useInput","validateValue","enteredText","setEnteredText","isTouched","setIsTouched","enteredIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,cAAc,GAAGL,aAAa,CAACC,WAAD,CAApC;AACA,QAAMK,QAAQ,GAAG,CAACD,cAAD,IAAmBF,SAApC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACpCN,IAAAA,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAM;AAChBV,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAMA,SAAO;AACLM,IAAAA,KAAK,EAAET,WADF;AAELY,IAAAA,OAAO,EAAER,cAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLI,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CA7BD;;GAAMb,Q;;AA+BN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n  const [enteredText, setEnteredText] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const enteredIsValid = validateValue(enteredText);\n  const hasError = !enteredIsValid && isTouched;\n\n  const valueChangeHandler = (event) => {\n    setEnteredText(event.target.value);\n  };\n\n  const inputBlurHandler = () => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n      setEnteredText('');\n      setIsTouched(false);\n  }\n  \n\n  return {\n    value: enteredText,\n    isValid: enteredIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = () => {\n  _s();\n\n  const [enteredText, setEnteredText] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailText, setEnteredEmailText] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false); // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  const enteredNameIsValid = enteredText.trim() !== '';\n  const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n  const enteredEmailIsValid = enteredEmailText.trim() !== '';\n  const inputEmailBox = !enteredEmailIsValid && enteredEmailTouched; // const [ formIsValid, setFormIsValid ] = useState(false);\n\n  let formIsValid = false; // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n\n  if (enteredNameIsValid) {\n    formIsValid = true;\n  } else {\n    formIsValid = false;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredText(event.target.value);\n    setEnteredEmailText(event.target.value); // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true); // if (enteredText.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n  };\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    if (!enteredEmailIsValid) {\n      return;\n    } // setEnteredNameIsValid(true);\n\n\n    console.log(enteredText);\n    console.log(enteredEmailText);\n    setEnteredText(\"\");\n    setEnteredEmailText(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const inputBoxEffect = inputNameBox ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredText,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), inputNameBox && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"name must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        value: enteredEmailText,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), inputNameBox && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"email must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        onClick: formSubmissionHandler,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"H929cRXH6xVnBPp3Rn+jUYN37bQ=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js"],"names":["useState","SimpleInput","enteredText","setEnteredText","enteredNameTouched","setEnteredNameTouched","enteredEmailText","setEnteredEmailText","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","inputNameBox","enteredEmailIsValid","inputEmailBox","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","console","log","inputBoxEffect"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = () => {\n\n  const [enteredText, setEnteredText] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const [enteredEmailText, setEnteredEmailText] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const enteredNameIsValid = enteredText.trim() !== '';\n  const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmailText.trim() !== '';\n  const inputEmailBox = !enteredEmailIsValid && enteredEmailTouched;\n  \n  // const [ formIsValid, setFormIsValid ] = useState(false);\n  let formIsValid = false;\n\n  // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n    if(enteredNameIsValid){\n      formIsValid = true;\n    } else {\n      formIsValid = false;\n    }\n\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredText(event.target.value);\n    setEnteredEmailText(event.target.value);\n    // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n    // if (enteredText.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n  }\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n    if (!enteredEmailIsValid) {\n      return;\n    }\n    // setEnteredNameIsValid(true);\n\n    console.log(enteredText);\n    console.log(enteredEmailText);\n\n\n    setEnteredText(\"\");\n    setEnteredEmailText(\"\");\n\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n\n\n  };\n\n\n  const inputBoxEffect = inputNameBox\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n    \n\n  return (\n    <div>\n      <div className={inputBoxEffect}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredText}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n        />\n        {inputNameBox && (\n          <p className=\"error-text\">name must not empty!!</p>\n        )}\n      </div>\n      <div className={inputBoxEffect}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          value={enteredEmailText}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n        />\n        {inputNameBox && (\n          <p className=\"error-text\">email must not empty!!</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid} onClick={formSubmissionHandler}>Submit</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = () => {\n  _s();\n\n  // const [enteredText, setEnteredText] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmailText, setEnteredEmailText] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false); // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // const enteredNameIsValid = enteredText.trim() !== '';\n  // const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmailText.includes() !== '@';\n  const inputEmailBox = !enteredEmailIsValid && enteredEmailTouched; // const [ formIsValid, setFormIsValid ] = useState(false);\n\n  let formIsValid = false; // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } else {\n    formIsValid = false;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredText(event.target.value);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmailText(event.target.value);\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    } // setEnteredNameIsValid(true);\n\n\n    console.log(enteredText);\n    console.log(enteredEmailText);\n    setEnteredText(\"\");\n    setEnteredEmailText(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n  };\n\n  const inputNameBoxEffect = inputNameBox ? \"form-control invalid\" : \"form-control\";\n  const inputEmailBoxEffect = inputEmailBox ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputNameBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredText,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), inputNameBox && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"name must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputEmailBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        value: enteredEmailText,\n        onBlur: emailInputBlurHandler,\n        onChange: emailInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), inputEmailBox && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"email must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        onClick: formSubmissionHandler,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"M/e9g0E3fqHaJ9mxU+BCBervFAw=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js"],"names":["useState","SimpleInput","enteredEmailText","setEnteredEmailText","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","inputEmailBox","formIsValid","enteredNameIsValid","nameInputChangeHandler","event","setEnteredText","target","value","emailInputChangeHandler","nameInputBlurHandler","setEnteredNameTouched","emailInputBlurHandler","formSubmissionHandler","console","log","enteredText","inputNameBoxEffect","inputNameBox","inputEmailBoxEffect"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = () => {\n\n  // const [enteredText, setEnteredText] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const [enteredEmailText, setEnteredEmailText] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // const enteredNameIsValid = enteredText.trim() !== '';\n  // const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n\n  const enteredEmailIsValid = enteredEmailText.includes() !== '@';\n  const inputEmailBox = !enteredEmailIsValid && enteredEmailTouched;\n  \n  // const [ formIsValid, setFormIsValid ] = useState(false);\n  let formIsValid = false;\n\n  // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n    if(enteredNameIsValid && enteredEmailIsValid){\n      formIsValid = true;\n    } else {\n      formIsValid = false;\n    }\n\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredText(event.target.value);\n  };\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmailText(event.target.value);\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n  }\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  }\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n  \n    // setEnteredNameIsValid(true);\n\n    console.log(enteredText);\n    console.log(enteredEmailText);\n\n\n    setEnteredText(\"\");\n    setEnteredEmailText(\"\");\n\n    setEnteredNameTouched(false);\n    setEnteredEmailTouched(false);\n\n\n  };\n\n\n  const inputNameBoxEffect = inputNameBox\n    ? \"form-control invalid\"\n    : \"form-control\";\n    const inputEmailBoxEffect = inputEmailBox\n    ? \"form-control invalid\"\n    : \"form-control\";\n    \n\n  return (\n    <div>\n      <div className={inputNameBoxEffect}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredText}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n        />\n        {inputNameBox && (\n          <p className=\"error-text\">name must not empty!!</p>\n        )}\n      </div>\n      <div className={inputEmailBoxEffect}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          value={enteredEmailText}\n          onBlur={emailInputBlurHandler}\n          onChange={emailInputChangeHandler}\n        />\n        {inputEmailBox && (\n          <p className=\"error-text\">email must not empty!!</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid} onClick={formSubmissionHandler}>Submit</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}
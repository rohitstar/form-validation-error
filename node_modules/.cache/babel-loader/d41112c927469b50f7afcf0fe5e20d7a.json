{"ast":null,"code":"var _jsxFileName = \"/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = () => {\n  _s();\n\n  // const nameInputRef = useRef();\n  const [enteredText, setEnteredText] = useState(\"\"); // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputValid = () => {\n    if (inputNameBox) {\n      console.log(\"Name Input is Valid!\");\n    }\n  };\n\n  const nameInputChangeHandler = event => {\n    setEnteredText(event.target.value);\n\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n\n    if (enteredText.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredText.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredText); // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n\n    setEnteredText(\"\");\n  };\n\n  const inputBoxEffect = inputNameBox ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        value: enteredText,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), inputNameBox && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"name must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: formSubmissionHandler,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"OKX8UMBwUK+rfH3SWuIW9sZnuXU=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js"],"names":["useEffect","useState","SimpleInput","enteredText","setEnteredText","enteredNameTouched","setEnteredNameTouched","inputNameBox","enteredNameIsValid","nameInputValid","console","log","nameInputChangeHandler","event","target","value","trim","setEnteredNameIsValid","nameInputBlurHandler","formSubmissionHandler","inputBoxEffect"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,EAAD,CAA9C,CAFwB,CAGxB;;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAMM,YAAY,GAAG,CAACC,kBAAD,IAAuBH,kBAA5C;;AAGA,QAAMI,cAAc,GAAG,MAAM;AAC3B,QAAIF,YAAJ,EAAkB;AAChBG,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;AACF,GAJD;;AAMA,QAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACxCT,IAAAA,cAAc,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;AACA,QAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAlC,EAAsC;AACpCC,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AACF,GALD;;AAOA,QAAMC,oBAAoB,GAAG,MAAM;AACjCZ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIH,WAAW,CAACa,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BC,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GALD;;AAOA,QAAME,qBAAqB,GAAG,MAAM;AAClC;AACAb,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAIH,WAAW,CAACa,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BC,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AACDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AAEAP,IAAAA,OAAO,CAACC,GAAR,CAAYR,WAAZ,EAVkC,CAYlC;AACA;;AAEAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAhBD;;AAmBA,QAAMgB,cAAc,GAAGb,YAAY,GAC/B,sBAD+B,GAE/B,cAFJ;AAIA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEa,cAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE;AACA,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,KAAK,EAAEjB,WAJT;AAKE,QAAA,MAAM,EAAEe,oBALV;AAME,QAAA,QAAQ,EAAEN;AANZ;AAAA;AAAA;AAAA;AAAA,cAFF,EAUGL,YAAY,iBACX;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEY,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAxED;;GAAMjB,W;;KAAAA,W;AA0EN,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst SimpleInput = () => {\n  // const nameInputRef = useRef();\n  const [enteredText, setEnteredText] = useState(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n\n\n  const nameInputValid = () => {\n    if (inputNameBox) {\n      console.log(\"Name Input is Valid!\");\n    }\n  };\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredText(event.target.value);\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n    if (enteredText.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  }\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredText.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n    setEnteredNameIsValid(true);\n\n    console.log(enteredText);\n\n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n\n    setEnteredText(\"\");\n  };\n\n\n  const inputBoxEffect = inputNameBox\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <div>\n      <div className={inputBoxEffect}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          value={enteredText}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n        />\n        {inputNameBox && (\n          <p className=\"error-text\">name must not empty!!</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button onClick={formSubmissionHandler}>Submit</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hook/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = () => {\n  _s();\n\n  const {\n    value: enteredText,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: resetInputName\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmailText,\n    hasError: emailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailInputChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    reset: resetInputEmail\n  } = useInput(value => value.includes() !== \"@\"); // const [enteredText, setEnteredText] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [enteredEmailText, setEnteredEmailText] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // const enteredNameIsValid = enteredText.trim() !== '';\n  // const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n  // const enteredEmailIsValid = enteredEmailText.includes() !== \"@\";\n  // const inputEmailBox = !enteredEmailIsValid && enteredEmailTouched;\n  // const [ formIsValid, setFormIsValid ] = useState(false);\n\n  let formIsValid = false; // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } // const nameInputChangeHandler = (event) => {\n  //   setEnteredText(event.target.value);\n  // };\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmailText(event.target.value);\n  // };\n  // const nameInputBlurHandler = () => {\n  //   setEnteredNameTouched(true);\n  // };\n  // const emailInputBlurHandler = () => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    // setEnteredNameTouched(true);\n    // setEnteredEmailTouched(true);\n    if (!enteredNameIsValid) {\n      return;\n    } // setEnteredNameIsValid(true);\n\n\n    console.log(enteredText);\n    console.log(enteredEmailText);\n    resetInputName();\n    resetInputEmail(); // setEnteredText(\"\");\n    // setEnteredNameTouched(false);\n    // setEnteredEmailText(\"\");\n    // setEnteredEmailTouched(false);\n  };\n\n  const inputNameBoxEffect = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const inputEmailBoxEffect = emailInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputNameBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredText,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Plz enter name must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputEmailBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"email\",\n        value: enteredEmailText,\n        onBlur: emailInputBlurHandler,\n        onChange: emailInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Plz enter email must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        onClick: formSubmissionHandler,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"to5yUW164zim3pvRheOZ9V2niKA=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","value","enteredText","hasError","nameInputHasError","isValid","enteredNameIsValid","valueChangeHandler","nameInputChangeHandler","inputBlurHandler","nameInputBlurHandler","reset","resetInputName","trim","enteredEmailText","emailInputHasError","enteredEmailIsValid","emailInputChangeHandler","emailInputBlurHandler","resetInputEmail","includes","formIsValid","formSubmissionHandler","console","log","inputNameBoxEffect","inputEmailBoxEffect"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,mBAArB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AACJC,IAAAA,KAAK,EAAEC,WADH;AAEJC,IAAAA,QAAQ,EAAEC,iBAFN;AAGJC,IAAAA,OAAO,EAAEC,kBAHL;AAIJC,IAAAA,kBAAkB,EAAEC,sBAJhB;AAKJC,IAAAA,gBAAgB,EAAEC,oBALd;AAMJC,IAAAA,KAAK,EAAGC;AANJ,MAOFb,QAAQ,CAAEE,KAAD,IAAWA,KAAK,CAACY,IAAN,OAAiB,EAA7B,CAPZ;AASA,QAAM;AACJZ,IAAAA,KAAK,EAAEa,gBADH;AAEJX,IAAAA,QAAQ,EAAEY,kBAFN;AAGJV,IAAAA,OAAO,EAAEW,mBAHL;AAIJT,IAAAA,kBAAkB,EAAEU,uBAJhB;AAKJR,IAAAA,gBAAgB,EAAES,qBALd;AAMJP,IAAAA,KAAK,EAAGQ;AANJ,MAOFpB,QAAQ,CAAEE,KAAD,IAAWA,KAAK,CAACmB,QAAN,OAAqB,GAAjC,CAPZ,CAVwB,CAmBxB;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;;AACA,MAAIC,WAAW,GAAG,KAAlB,CAlCwB,CAoCxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIf,kBAAkB,IAAIU,mBAA1B,EAA+C;AAC7CK,IAAAA,WAAW,GAAG,IAAd;AACD,GA7CuB,CA+CxB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMC,qBAAqB,GAAG,MAAM;AAClC;AACA;AACA;AAEA,QAAI,CAAChB,kBAAL,EAA0B;AACxB;AACD,KAPiC,CASlC;;;AAEAiB,IAAAA,OAAO,CAACC,GAAR,CAAYtB,WAAZ;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYV,gBAAZ;AAEAF,IAAAA,cAAc;AACdO,IAAAA,eAAe,GAfmB,CAiBlC;AACA;AAEA;AACA;AACD,GAtBD;;AAwBA,QAAMM,kBAAkB,GAAGrB,iBAAiB,GACxC,sBADwC,GAExC,cAFJ;AAGA,QAAMsB,mBAAmB,GAAGX,kBAAkB,GAC1C,sBAD0C,GAE1C,cAFJ;AAIA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEU,kBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,KAAK,EAAEvB,WAHT;AAIE,QAAA,MAAM,EAAEQ,oBAJV;AAKE,QAAA,QAAQ,EAAEF;AALZ;AAAA;AAAA;AAAA;AAAA,cAFF,EASGJ,iBAAiB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAK,MAAA,SAAS,EAAEsB,mBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,KAAK,EAAEZ,gBAHT;AAIE,QAAA,MAAM,EAAEI,qBAJV;AAKE,QAAA,QAAQ,EAAED;AALZ;AAAA;AAAA;AAAA;AAAA,cAFF,EASGF,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,eAuBE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACM,WAAnB;AAAgC,QAAA,OAAO,EAAEC,qBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CA3HD;;GAAMtB,W;UAQAD,Q,EASAA,Q;;;KAjBAC,W;AA6HN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hook/use-input\";\n\nconst SimpleInput = () => {\n  const {\n    value: enteredText,\n    hasError: nameInputHasError,\n    isValid: enteredNameIsValid,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset : resetInputName,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmailText,\n    hasError: emailInputHasError,\n    isValid: enteredEmailIsValid,\n    valueChangeHandler: emailInputChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    reset : resetInputEmail,\n  } = useInput((value) => value.includes() !== \"@\");\n\n  // const [enteredText, setEnteredText] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // const [enteredEmailText, setEnteredEmailText] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  // const enteredNameIsValid = enteredText.trim() !== '';\n  // const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n\n  // const enteredEmailIsValid = enteredEmailText.includes() !== \"@\";\n  // const inputEmailBox = !enteredEmailIsValid && enteredEmailTouched;\n\n  // const [ formIsValid, setFormIsValid ] = useState(false);\n  let formIsValid = false;\n\n  // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } \n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredText(event.target.value);\n  // };\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmailText(event.target.value);\n  // };\n\n  // const nameInputBlurHandler = () => {\n  //   setEnteredNameTouched(true);\n  // };\n  // const emailInputBlurHandler = () => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    // setEnteredNameTouched(true);\n    // setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid ) {\n      return;\n    }\n\n    // setEnteredNameIsValid(true);\n\n    console.log(enteredText);\n    console.log(enteredEmailText);\n\n    resetInputName();\n    resetInputEmail();\n\n    // setEnteredText(\"\");\n    // setEnteredNameTouched(false);\n\n    // setEnteredEmailText(\"\");\n    // setEnteredEmailTouched(false);\n  };\n\n  const inputNameBoxEffect = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const inputEmailBoxEffect = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <div>\n      <div className={inputNameBoxEffect}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredText}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n        />\n        {nameInputHasError && <p className=\"error-text\">Plz enter name must not empty!!</p>}\n      </div>\n      <div className={inputEmailBoxEffect}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"text\"\n          id=\"email\"\n          value={enteredEmailText}\n          onBlur={emailInputBlurHandler}\n          onChange={emailInputChangeHandler}\n        />\n        {emailInputHasError && <p className=\"error-text\">Plz enter email must not empty!!</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid} onClick={formSubmissionHandler}>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}
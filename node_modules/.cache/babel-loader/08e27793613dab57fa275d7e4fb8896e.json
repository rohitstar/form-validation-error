{"ast":null,"code":"var _jsxFileName = \"/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = () => {\n  _s();\n\n  const [enteredText, setEnteredText] = useState(\"\"); // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // const [ formIsValid, setFormIsValid ] = useState(false);\n\n  const enteredNameIsValid = enteredText.trim() !== '';\n  const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n  const formIsValid = false; // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n\n  if (enteredNameIsValid) {\n    formIsValid = true;\n  } else {\n    formIsValid = false;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredText(event.target.value); // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true); // if (enteredText.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n  };\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    } // setEnteredNameIsValid(true);\n\n\n    console.log(enteredText);\n    setEnteredText(\"\");\n    setEnteredNameTouched(false);\n  };\n\n  const inputBoxEffect = inputNameBox ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputBoxEffect,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredText,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), inputNameBox && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"name must not empty!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        onClick: formSubmissionHandler,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"OKX8UMBwUK+rfH3SWuIW9sZnuXU=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/rohitchauhan/Desktop/reactjs/form-validation-custom-hook/src/components/SimpleInput.js"],"names":["useState","SimpleInput","enteredText","setEnteredText","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","trim","inputNameBox","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","console","log","inputBoxEffect"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAExB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,EAAD,CAA9C,CAFwB,CAGxB;;AACA,QAAM,CAACI,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAAC,KAAD,CAA5D,CAJwB,CAK1B;;AACE,QAAMM,kBAAkB,GAAGJ,WAAW,CAACK,IAAZ,OAAuB,EAAlD;AACA,QAAMC,YAAY,GAAG,CAACF,kBAAD,IAAuBF,kBAA5C;AAEA,QAAMK,WAAW,GAAG,KAApB,CATwB,CAWxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,MAAGH,kBAAH,EAAsB;AACpBG,IAAAA,WAAW,GAAG,IAAd;AACD,GAFD,MAEO;AACLA,IAAAA,WAAW,GAAG,KAAd;AACD;;AAKH,QAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACxCR,IAAAA,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADwC,CAExC;AACA;AACA;AACD,GALD;;AAOA,QAAMC,oBAAoB,GAAG,MAAM;AACjCT,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CADiC,CAEjC;AACA;AACA;AACD,GALD;;AAOA,QAAMU,qBAAqB,GAAG,MAAM;AAClC;AACAV,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAI,CAACC,kBAAL,EAAyB;AACvB;AACD,KANiC,CAOlC;;;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AAEAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AAED,GAdD;;AAiBA,QAAMa,cAAc,GAAGV,YAAY,GAC/B,sBAD+B,GAE/B,cAFJ;AAIA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEU,cAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,KAAK,EAAEhB,WAHT;AAIE,QAAA,MAAM,EAAEY,oBAJV;AAKE,QAAA,QAAQ,EAAEJ;AALZ;AAAA;AAAA;AAAA;AAAA,cAFF,EASGF,YAAY,iBACX;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACC,WAAnB;AAAgC,QAAA,OAAO,EAAEM,qBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAnFD;;GAAMd,W;;KAAAA,W;AAqFN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = () => {\n\n  const [enteredText, setEnteredText] = useState(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n// const [ formIsValid, setFormIsValid ] = useState(false);\n  const enteredNameIsValid = enteredText.trim() !== '';\n  const inputNameBox = !enteredNameIsValid && enteredNameTouched;\n\n  const formIsValid = false;\n\n  // useEffect(() => {\n  //   if(enteredNameIsValid){\n  //     setFormIsValid(true);\n  //   } else {\n  //     setFormIsValid(false);\n  //   }\n  // }, [enteredNameIsValid]);\n \n    if(enteredNameIsValid){\n      formIsValid = true;\n    } else {\n      formIsValid = false;\n    }\n\n\n\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredText(event.target.value);\n    // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n    // if (enteredText.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n  }\n\n  const formSubmissionHandler = () => {\n    // event.perventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n    // setEnteredNameIsValid(true);\n\n    console.log(enteredText);\n\n    setEnteredText(\"\");\n    setEnteredNameTouched(false);\n\n  };\n\n\n  const inputBoxEffect = inputNameBox\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <div>\n      <div className={inputBoxEffect}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredText}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n        />\n        {inputNameBox && (\n          <p className=\"error-text\">name must not empty!!</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid} onClick={formSubmissionHandler}>Submit</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}